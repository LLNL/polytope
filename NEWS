Releaes 0.5.10

changeset:
  292.7ace19fe234f

Bugfix:

- The method for detecting and eliminating degenerate nodes has been refined
  in TriangleTessellator to make it more robust to large circumcenter positions
- TriangleTessellator has been reorganized to speed up bounded tessellations
- More test boundaries and cases for the orphaned cell algorithm

Added capability:

- Triangle circumcenters are now computed with exact predicates to improve
  robustness of the 2D algorithm

--------------------------------------------------------------------------------
Release 0.5.9

changeset:
  278:c3c28b740513

Bugfix:

- Extensive testing, particularly of the orphaned pieces of cells for complex
  boundaries in 2D tessellations.
- TriangleTessellator has been refactored to more closely match the structure
  used in TetgenTessellator.
- David has put in a fair amount of work debugging the DistributedTessellator,
  which seems fairly robust now.

Added capability:

- Initial implementation of the 3D Tetgen tessellator.  Currently only supports
  unbounded tessellations.

--------------------------------------------------------------------------------
Release 0.5.8

changeset:
  239:ff9d1d22e3ba

Bugfix:

- For bounded tessellations using TriangleTessellator, cells may leave orphaned
  pieces for complicated boundaries. Added algorithm to distribute the orphaned
  piece among its neighbors using a local Voronoi mesh.

Added capability:

- Polytope may be built with Python wrappers using PyBindGen. Currently wrap
  the Tessellation, Tessellator, and PLC structs as well as provide methods for
  using C++ containers as Python objects. User must specify a Python executable 
  and version number and a path to the PyBindGen installation. Additional checks
  on the Python path determine if bindings can be generated before building.

--------------------------------------------------------------------------------
Release 0.5.7

changeset:
  210:3928f2ed1913

Fixes to compile on IBM xlC platforms in a fairly broken (i.e., no
Boost.Geometry) way.

--------------------------------------------------------------------------------
Release 0.5.6

changeset:
  202:53fca806b57f

Bugfixes for specific platforms.  

1.  Build and test correctly on Mac OS/X with clang++.

2.  Build (but nearly useless) on IBM xlC.  xlC does not handle Boost.Geometry
    correctly, so we have disabled all code employing Boost.Geometry on that
    platform, which means the TriangleTessellator is not available.

--------------------------------------------------------------------------------
Release 0.5.5

changeset:
  199:caa54ad70b77

More bugfixes:

- DistributedTessellator passes its tests now. Added second adjacency loop to
  catch any neighboring domains that see each other on the full mesh but not
  necessarily on the hull mesh. tests/test_FailedCommunicaton illustrates how
  this can happen.

- TriangleTessellator now checks that all tessellation nodes lie inside the
  boundary. Nodes outside are moved to the boundary using the new nearestPoint
  routine, provided the node does not move a distance greater than some
  geometric tolerance.

- Added several new tests for the 2D serial and distributed tessellators. New
  routines in polytope_test_utilities and new classes aid in designing further
  tests.

--------------------------------------------------------------------------------
Release 0.5.4

Minor bugfixes:

- Upping required Boost version to 1.51 since we get incorrect geometries with
  the Triangle tessellator using 1.50.

- Pulling the requirement of throwing the -fPIC compile flag out to all compilers
  rather than just GNU.  Not sure if this will be portable in all cases yet, but
  we definitely need this in the instance of intel icpc.

--------------------------------------------------------------------------------
Release 0.5.3

Introducing the SerialDistributedTessellator, which should produce reliable
tessellations in parallel because it reduces all generators to all processors,
builds the global tessellation, and then culls down to each domains owned cells.
This is obviously not a good solution for scaling, but will be a useful check
on the DistributedTessellator.

--------------------------------------------------------------------------------
Release 0.5.2

More bugfixes for the most part:

- Adding a parallel consistency checking method (checkDistributedTessellation)
  that performs fairly extensive (and potentially expensive) checking of the
  parallel data structures.

- Trying to make the DistributedTessellator more robust, but at least with our
  one fully functioning serial Tessellator (Triangle) we still get occasionally
  bad parallel structures.  The problem is that the tessellation is not 100%
  reproducible with the same generator positions in different orders.

- Adding some new make configuration options, like use_silo=0/1.

--------------------------------------------------------------------------------
Release 0.5.1

Minor bugfix release:

- Puts the ASSERT2 macro inside the polytope namespace to avoid conflicts with
  host codes.

--------------------------------------------------------------------------------
Release 0.5.0

Initial release of polytope.  Includes functional 2D tessellator
TriangleTessellator and somewhat flaky VoroPP_2d and VoroPP_3d tessellators.
The DistributedTessellator seems to be working OK as well.  TetgenTessellator is
not passing it's unit tests.

Basically this release is intended as an initial beta release for the 2D
Triangle based tessellator, both serial and parallel.
