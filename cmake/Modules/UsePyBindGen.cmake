# - A Python-wrapping module for CMake using PyBindGen
#
# Modified from the UseSWIG module from the cmake2.8 release.
#
# Defines the following macros:
#   PYBINDGEN_GENERATE_BINDINGS(module_name module_list)
#     - Generates the Python bindings for each module in the list
#
# Internal macros to do the work:
#   PYBINDGEN_REGISTER_MODULE(name)
#     - Builds list of Python source code and generated C++ code
#   PYBINDGEN_COMPILE_ALL
#     - Calls the python interpreter to compile all Python source code
# 
#
# Variables that must be set before calling PYBINDGEN_GENERATE_BINDINGS:
#   PYBINDGEN_DIR
#     - Location of the python source code to build the bindings
#   PYTHON_EXE
#     - Python executable
#   PYTHON_LIB_DIR
#     - Python lib (typically obtained from the executable root)
#
# To get the names of the generated source
# use: ${PYBINDGEN_GENERATED_SOURCE}
#

# Initialize the list of Python source code
set(PYBINDGEN_SOURCE)

# Initialize the list of compiled Python source
set(PYBINDGEN_COMPILED_SOURCE)

# Initialize the list of C++ code generated by PyBindGen
set(PYBINDGEN_GENERATED_SOURCE)

#
# INTERNAL: Build up the lists of source files and generated files to track
# outputs and dependencies for the build
#
macro(PYBINDGEN_REGISTER_MODULE _module)
  set(_source "${PYBINDGEN_DIR}/${_module}Module.py")
  set(_outfile "${_source}c")
  list(APPEND PYBINDGEN_COMPILED_SOURCE ${_outfile})
  list(APPEND PYBINDGEN_SOURCE ${_source})
  list(APPEND PYBINDGEN_GENERATED_SOURCE "${PYBINDGEN_MODULE_NAME}_${_module}.C")
endmacro()

#
# INTERNAL: Runs "Python compileall.py" on the Python source
#
macro(PYBINDGEN_COMPILE_ALL)
  add_custom_command(
    OUTPUT ${PYBINDGEN_COMPILED_SOURCE}
    COMMAND ${PYTHON_EXE} ${PYTHON_LIB_DIR}/compileall.py ${PYBINDGEN_DIR}
    )
endmacro()

#
# Runs "Python PolytopeModulesBindings.pyc" to generate the bindings.
# This is where the PyBindGen module is actually used. Calls the previous
# internal macros to generate the source file lists
#
macro(PYBINDGEN_GENERATE_BINDINGS module_list)
  list(APPEND PYBINDGEN_SOURCE "${PYBINDGEN_MODULE_NAME}Bindings.py")
  list(APPEND PYBINDGEN_COMPILED_SOURCE "${PYBINDGEN_MODULE_NAME}Bindings.pyc")
  list(APPEND PYBINDGEN_GENERATED_SOURCE "${PYBINDGEN_MODULE_NAME}.C")
  set(PYBINDGEN_GENERATED_HEADER "${PYBINDGEN_MODULE_NAME}.hh")
  foreach(it ${module_list})
    PYBINDGEN_REGISTER_MODULE(${it})
  endforeach()
  PYBINDGEN_COMPILE_ALL()
  add_custom_command(
    OUTPUT ${PYBINDGEN_GENERATED_SOURCE} ${PYBINDGEN_GENERATED_HEADER}
    COMMAND ${PYTHON_EXE} ${PYBINDGEN_DIR}/${PYBINDGEN_MODULE_NAME}Bindings.pyc
    DEPENDS ${PYBINDGEN_COMPILED_SOURCE}
    )
endmacro()